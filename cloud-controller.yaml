apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:cloud-controller-manager
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    k8s-app: cloud-controller-manager
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services/status
    verbs:
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
      - get
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - create
      - update
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:cloud-controller-manager
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
  - kind: User
    name: cloud-controller-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system:cloud-controller-manager:extension-apiserver-authentication-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system
  - apiGroup: ""
    kind: User
    name: cloud-controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-controller-manager
  namespace: kube-system
  labels:
    component: cloud-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: control-plane
      component: cloud-controller-manager
  template:
    metadata:
      labels:
        tier: control-plane
        component: cloud-controller-manager
    spec:
      priorityClassName: system-node-critical
      hostNetwork: true
      serviceAccountName: cloud-controller-manager
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      containers:
        - name: cloud-controller-manager
          image: mcr.microsoft.com/oss/kubernetes/azure-cloud-controller-manager:v1.28.0
          imagePullPolicy: IfNotPresent
          command: ["cloud-controller-manager"]
          args:
            - "--allocate-node-cidrs=true" # "false" for Azure CNI and "true" for other network plugins
            - "--cloud-config=/etc/kubernetes/cloud-config/azure.json"
            - "--cloud-provider=azure"
            - "--cluster-cidr=10.244.0.0/24"
            - "--cluster-name=k8s"
            - "--controllers=*,-cloud-node" # disable cloud-node controller
            - "--configure-cloud-routes=true" # "false" for Azure CNI and "true" for other network plugins
            - "--leader-elect=true"
            - "--route-reconciliation-period=10s"
            - "--v=4"
            - "--secure-port=10267"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: "4"
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10267
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: etc-kubernetes
              mountPath: /etc/kubernetes
            - name: cloud-config
              mountPath: /etc/kubernetes/cloud-config
              readOnly: true
            - name: etc-ssl
              mountPath: /etc/ssl
              readOnly: true
            - name: msi
              mountPath: /var/lib/waagent/ManagedIdentity-Settings
              readOnly: true
      volumes:
        - name: etc-kubernetes
          hostPath:
            path: /etc/kubernetes
        - name: cloud-config
          secret:
            secretName: azure-cloud-config
        - name: etc-ssl
          hostPath:
            path: /etc/ssl
        - name: msi
          hostPath:
            path: /var/lib/waagent/ManagedIdentity-Settings
---
apiVersion: v1
kind: Secret
metadata:
  name: azure-cloud-config
  namespace: kube-system
type: Opaque
stringData:
  azure.json: |-
    {
        "cloud":"AzurePublicCloud",
        "tenantId": "d831639f-a912-4e54-89a1-6e82b71411e2",
        "aadClientId": "54a634cf-dde1-44ef-8e18-62628767bd2c",
        "aadClientSecret": "JfC8Q~P8wUZI8ALJ33gnF4wp85Ka6XcGJGWmKbtV",
        "subscriptionId": "e9300e42-85d3-4492-a229-d1d94b432676",
        "resourceGroup": "ppf-k8s-rg",
        "location": "westeurope",
        "subnetName": "default",
        "securityGroupName": "default",
        "securityGroupResourceGroup": "ppf-k8s-rg",
        "vnetName": "ppf-k8s-rg-vnet",
        "vnetResourceGroup": "ppf-k8s-rg",
        "primaryAvailabilitySetName": "load-balancer-as",
        "routeTableName": "default",
        "cloudProviderBackoff": false,
        "useManagedIdentityExtension": false,
        "useInstanceMetadata": true
    }